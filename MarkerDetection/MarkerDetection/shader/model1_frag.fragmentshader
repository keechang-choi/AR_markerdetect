#version 330 core

out vec4 FragColor;

in vec3 f_pos;
in vec3 f_normal;
in vec2 uv_vert_out;

uniform vec3 viewPos;
uniform sampler2D model_texture;

uniform vec3 light_position;
uniform float light_constant;
uniform float light_linear;
uniform float light_quadratic;
uniform vec3 light_color;

void main(){
  vec4 model_color = texture(model_texture, uv_vert_out);
  //vec4 model_color = vec4(1.0, 0.0, 0.0, 1.0);
  vec3 norm = normalize(f_normal);
  vec3 viewDir = normalize(viewPos - f_pos);
  vec3 lightDir = normalize(light_position - f_pos);
  float diff = max(dot(norm, lightDir), 0.0);
  vec3 reflectDir = reflect(-lightDir, norm);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), 64);
  float distance = length(light_position - f_pos);
  float attenuation = 1.0 / (light_constant + light_linear * distance + light_quadratic * (distance * distance));
  float ambientStrength = 0.3;
  vec3 ambient = ambientStrength*light_color;
  vec3 diffuse = diff * light_color;
  float specularStrength = 0.6;
  vec3 specular = specularStrength * spec * light_color;
  ambient *= attenuation;
  diffuse *= attenuation;
  specular *= attenuation;
  vec4 result = vec4((ambient + diffuse + specular),1.0)*model_color;

  FragColor = result;
  //FragColor = model_color;
}
